name: Rollback Prod
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  APP_NAMESPACE: example
  APP_NAME: security-custom-provider
  AWS_PROD_ACCESS_KEY_ID: ${{ secrets.AWS_PROD_ACCESS_KEY_ID }}
  AWS_PROD_SECRET_ACCESS_KEY: ${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}
  AWS_PROD_ACCOUNT_ID: ${{ secrets.AWS_PROD_ACCOUNT_ID }}
  KUBE_CONFIG_DATA: ${{ secrets.AWS_PROD_EKS_KUBE_CONFIG }}
  SLACK_CHANNEL_ID: C038LF7HCTV


jobs:
  deploy-kubernetes-prod:
    name: Rollback Kubernetes PROD
    runs-on: [ deployer-prod ]
    timeout-minutes: 15
    outputs:
      LAST_POD: ${{ env.LAST_POD }}
    steps:

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_PROD_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_PROD_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Extract tag name
        run: echo "##[set-output name=tag;]${{ github.ref_name }}"
        id: extract_tag

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.extract_tag.outputs.tag }}

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          sudo unzip awscliv2.zip
          sudo ./aws/install

      - name: Check TAG
        id: tag-check
        run: |
          aws ecr describe-images --repository-name=${{ env.APP_NAME }} --image-ids=imageTag=${{ steps.extract_tag.outputs.tag }}

      - name: ${{ env.CHECK_TAG }}
        if: ${{ failure() && steps.tag-check.conclusion == 'failure' }}
        env:
          CHECK_TAG: "The selected TAG does not exist in ECR, please choose a more recently TAG"
        run: |
          echo --- ${{ env.CHECK_TAG }} ---
          exit 1

      
      - name: Replace K8s files
        env:
          RELEASE_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.APP_NAME }}:${{ steps.extract_tag.outputs.tag }}
        run: |
          sed -i 's|__IMAGE__|${{ env.RELEASE_IMAGE }}|g' kubernetes/*.yaml
          sed -i 's|__NAMESPACE__|${{ env.APP_NAMESPACE }}|g' kubernetes/*.yaml
          sed -i 's|__APP_NAME__|${{ env.APP_NAME }}|g' kubernetes/*.yaml
          sed -i 's|__MIN_REPLICAS__|2|g' kubernetes/*.yaml
          sed -i 's|__MAX_REPLICAS__|10|g' kubernetes/*.yaml
          sed -i 's|__ENVIRONMENT__|prod|g' kubernetes/*.yaml
          sed -i 's|__ENV_TAG__|production|g' kubernetes/*.yaml
          sed -i 's|__DNS__|amaro.pro|g' kubernetes/*.yaml
          sed -i 's|__VERSION__|${{ steps.extract_tag.outputs.tag }}|g' kubernetes/*.yaml
      
      - name: Setup Kubectl
        uses: ThomasKliszowski/setup-kubectl@v1
        with:
          kube-config: ${{ env.KUBE_CONFIG_DATA }}
          kube-version: 1.15.0

      - name: Create NS
        run: kubectl apply -f kubernetes/*-namespace.yaml

      - name: Create Secret
        run: kubectl create secret generic ${{ env.APP_NAME }}-secret --from-literal=password=Changepwd -n ${{ env.APP_NAMESPACE }}
        continue-on-error: true

      - name: Apply configmap to Kubernetes cluster
        run: kubectl apply -f kubernetes/*-configmap-prod.yaml

      - name: Apply deployment to Kubernetes cluster
        run: kubectl apply -f kubernetes/*-deployment.yaml

      - name: Apply service to Kubernetes cluster
        run: kubectl apply -f kubernetes/*-service.yaml

      - name: Apply ingress to Kubernetes cluster
        run: kubectl apply -f kubernetes/*-ingress.yaml

      - name: Apply HPA to Kubernetes cluster
        run: kubectl apply -f kubernetes/*-hpa.yaml

      - name: Get the most recently pod
        run: echo "LAST_POD=$(kubectl get pods -n ${{ env.APP_NAMESPACE }} --sort-by=.metadata.creationTimestamp | grep ${{ env.APP_NAME }} | awk 'END{{ print $1 }}')" >> $GITHUB_ENV

      - name: Verify Kubernetes deployment
        id: verify-k8s
        timeout-minutes: 10
        run: kubectl rollout status deploy ${{ env.APP_NAME }}-deployment -n $APP_NAMESPACE

      - name: View the logs here
        if: ${{ failure() && steps.verify-k8s.conclusion == 'failure' }}
        run: |
          echo "Deploy FAILED, view the logs of the unhealthy pod here: https://kubedash.amaro.pro/#/log/devops/${{ env.LAST_POD }}/pod?namespace=${{ env.APP_NAMESPACE }}&container=${{ env.APP_NAME }}"
          exit 1

  slack-notification:
    name: Slack notification
    runs-on: [ deployer-dev ]
    needs: deploy-kubernetes-prod
    if: always()
    steps:
      - name: Extract tag name
        run: echo "##[set-output name=tag;]${{ github.ref_name }}"
        id: extract_tag

      - name: Notify on Slack failure on deployment
        uses: slackapi/slack-github-action@v1.15.0
        if: needs.deploy-kubernetes-prod.result == 'failure'
        with:
          channel-id: ${{ env.SLACK_CHANNEL_ID }}
          slack-message: |
            Erro no rollback em PROD.
            *Aplicação:* 
            ${{ env.APP_NAME }}          
            *Versão:*
            ${{ steps.extract_tag.outputs.tag }}
            *Veja os logs do pod mais recente de PROD através desse link:*
            https://kubedash.amaro.pro/#/log/devops/${{ needs.deploy-kubernetes-prod.outputs.LAST_POD }}/pod?namespace=${{ env.APP_NAMESPACE }}&container=${{ env.APP_NAME }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Notify Kubernetes rollback on Slack
        uses: slackapi/slack-github-action@v1.15.0
        if: needs.deploy-kubernetes-prod.result == 'success'
        with:
          channel-id: ${{ env.SLACK_CHANNEL_ID }}
          slack-message: |
            *Rollback realizado*
            Enviado por <https://github.com/${{ github.actor }}|${{ github.actor }}>
            *Aplicação*: 
            ${{ env.APP_NAME }}
            *Versão*:
            ${{ steps.extract_tag.outputs.tag }}
            *Acessível em:*
            https://${{ env.APP_NAME }}.amaro.pro/
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}